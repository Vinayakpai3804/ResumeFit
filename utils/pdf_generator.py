from typing import Dict
import json
from datetime import datetime

class PDFGenerator:
    """Generate PDF and markdown reports"""
    
    def generate_analysis_pdf(self, feedback_data: Dict, resume_text: str, job_role: str) -> bytes:
        """Generate PDF report (basic implementation)"""
        report_text = self.generate_text_report(feedback_data, job_role)
        return report_text.encode('utf-8')
    
    def generate_markdown_report(self, feedback_data: Dict, job_role: str) -> str:
        """Generate comprehensive markdown report"""
        report = f"""# ResumeFit AI Analysis Report

**Job Role:** {job_role}  
**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}  


## 📊 Executive Summary

**Overall Score:** {feedback_data.get('overall_score', 0)}/10  
**Match Percentage:** {feedback_data.get('match_percentage', 0)}%  

{feedback_data.get('summary', 'No summary available')}

## 💪 Key Strengths

"""
        
        for i, strength in enumerate(feedback_data.get('strengths', []), 1):
            report += f"{i}. {strength}\n"
        
        report += f"""
---

## ⚠️ Areas for Improvement

"""
        
        for i, weakness in enumerate(feedback_data.get('weaknesses', []), 1):
            report += f"{i}. {weakness}\n"
        
        report += f"""
---

## 🎯 Skills Analysis

### ✅ Skills Found
{', '.join(feedback_data.get('found_skills', ['None identified']))}

### ❌ Missing Skills
{', '.join(feedback_data.get('missing_skills', ['None identified']))}

### 🔑 Suggested Keywords
{', '.join(feedback_data.get('suggested_keywords', ['None suggested']))}

## 🚀 Action Plan

"""
        
        for i, suggestion in enumerate(feedback_data.get('suggestions', []), 1):
            report += f"{i}. {suggestion}\n"
        
        report += f"""
---

## 🤖 ATS Compatibility

**Score:** {feedback_data.get('ats_compatibility', {}).get('score', 0)}/10

### Issues Identified:
"""
        
        for issue in feedback_data.get('ats_compatibility', {}).get('issues', []):
            report += f"- {issue}\n"
        
        report += f"""
### Recommendations:
"""
        
        for rec in feedback_data.get('ats_compatibility', {}).get('recommendations', []):
            report += f"- {rec}\n"
        
        report += f"""
---

## 📋 Sections Needing Attention

"""
        
        for section in feedback_data.get('weak_sections', []):
            report += f"- {section}\n"
        
        report += f"""
---

*This report was generated by ResumeFit AI using grok api for advanced natural language processing and career guidance.*
"""
        
        return report
    
    def generate_text_report(self, feedback_data: Dict, job_role: str) -> str:
        """Generate simple text report"""
        return f"""ResumeFit AI Analysis Report (Powered by Puter.js)
Job Role: {job_role}
Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Overall Score: {feedback_data.get('overall_score', 0)}/10
Match Percentage: {feedback_data.get('match_percentage', 0)}%

Summary: {feedback_data.get('summary', 'No summary available')}

Strengths:
{chr(10).join(f"- {s}" for s in feedback_data.get('strengths', []))}

Areas for Improvement:
{chr(10).join(f"- {w}" for w in feedback_data.get('weaknesses', []))}

Suggestions:
{chr(10).join(f"- {s}" for s in feedback_data.get('suggestions', []))}

"""
